'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { Task } from '../types/task'
import { getTasks } from '../lib/supabase'

// –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ —Å Supabase
const FALLBACK_TASKS: Task[] = [
  { id: 1, text: '–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: 2 + 2 * 2 = ?', answer: 6 },
  { id: 2, text: '–í—ã—á–∏—Å–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 5! / 3! = ?', answer: 20 },
  { id: 3, text: '–ù–∞–π–¥–∏—Ç–µ —Å—É–º–º—É: 1 + 2 + 3 + ... + 10 = ?', answer: 55 },
]

export default function Home() {
  const [tasks, setTasks] = useState<Task[]>([])
  const [currentTask, setCurrentTask] = useState<Task | null>(null)
  const [userAnswer, setUserAnswer] = useState('')
  const [message, setMessage] = useState('')
  const [solvedTaskIds, setSolvedTaskIds] = useState<number[]>([])
  const [progress, setProgress] = useState(0)
  const [isDarkMode, setIsDarkMode] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [errorMessage, setErrorMessage] = useState<string | null>(null)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ
  useEffect(() => {
    async function initialize() {
      console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...')
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Supabase
        console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Supabase...')
        const supabaseTasks = await getTasks()
        console.log(`–ü–æ–ª—É—á–∏–ª–∏ ${supabaseTasks.length} –∑–∞–¥–∞—á –∏–∑ Supabase.`)
        
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, –∏–Ω–∞—á–µ - —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ
        const loadedTasks = supabaseTasks.length > 0 ? supabaseTasks : FALLBACK_TASKS
        if (supabaseTasks.length === 0) {
          console.warn('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑-–∑–∞ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ Supabase.')
          setErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏.')
        }
        console.log(`–í—Å–µ–≥–æ –∑–∞–¥–∞—á –¥–ª—è —Ä–∞–±–æ—Ç—ã: ${loadedTasks.length}`)
        setTasks(loadedTasks)
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ localStorage
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ localStorage...')
        const savedSolvedTaskIds = localStorage.getItem('solvedTaskIds')
        let parsedIds: number[] = []
        if (savedSolvedTaskIds) {
          parsedIds = JSON.parse(savedSolvedTaskIds)
          console.log(`–ù–∞–π–¥–µ–Ω–æ ${parsedIds.length} —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.`)
          setSolvedTaskIds(parsedIds)
          setProgress(Math.round((parsedIds.length / loadedTasks.length) * 100))
        } else {
          console.log('–†–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º—É
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ...')
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
        setIsDarkMode(prefersDark)
        if (prefersDark) {
          document.documentElement.classList.add('dark')
          console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞.')
        } else {
          console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞.')
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É...')
        await loadRandomTask(loadedTasks, parsedIds)
        
      } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
        setErrorMessage(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
        setTasks(FALLBACK_TASKS)
        await loadRandomTask(FALLBACK_TASKS, [])
      } finally {
        setIsLoading(false)
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
      }
    }
    
    initialize()
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Ä–µ—à–∏–ª
  const loadRandomTask = async (taskList = tasks, solvedIds = solvedTaskIds) => {
    console.log(`–ò—â–µ–º –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–≤—Å–µ–≥–æ –∑–∞–¥–∞—á: ${taskList.length}, —Ä–µ—à–µ–Ω–æ: ${solvedIds.length})`)
    const unsolvedTasks = taskList.filter(task => !solvedIds.includes(task.id))
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${unsolvedTasks.length} –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.`)
    
    if (unsolvedTasks.length === 0) {
      // –í—Å–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–µ–Ω—ã
      console.log('–í—Å–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–µ–Ω—ã!')
      setCurrentTask(null)
      return
    }

    const randomIndex = Math.floor(Math.random() * unsolvedTasks.length)
    const selectedTask = unsolvedTasks[randomIndex]
    console.log(`–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ ID: ${selectedTask.id}`)
    setCurrentTask(selectedTask)
    setUserAnswer('')
    setMessage('')
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!currentTask) return

    const userAnswerNumber = Number(userAnswer)
    const isCorrect = userAnswerNumber === currentTask.answer
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ (–∑–∞–¥–∞—á–∞ ${currentTask.id}): –≤–≤–µ–¥–µ–Ω–æ ${userAnswerNumber}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ${currentTask.answer}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${isCorrect ? '–≤–µ—Ä–Ω–æ' : '–Ω–µ–≤–µ—Ä–Ω–æ'}`)

    if (isCorrect) {
      const updatedSolvedTaskIds = [...solvedTaskIds, currentTask.id]
      setSolvedTaskIds(updatedSolvedTaskIds)
      localStorage.setItem('solvedTaskIds', JSON.stringify(updatedSolvedTaskIds))
      console.log(`–ó–∞–¥–∞—á–∞ ${currentTask.id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–∞—è. –í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–æ: ${updatedSolvedTaskIds.length}`)
      
      const newProgress = Math.round((updatedSolvedTaskIds.length / tasks.length) * 100)
      setProgress(newProgress)
      console.log(`–û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: ${newProgress}%`)
      
      setMessage('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => loadRandomTask(), 1000)
    } else {
      setMessage('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –¥—Ä—É–≥–æ–π –∑–∞–¥–∞—á–µ.')
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
  const toggleTheme = () => {
    setIsDarkMode(!isDarkMode)
    document.documentElement.classList.toggle('dark')
    console.log(`–¢–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ ${isDarkMode ? '—Å–≤–µ—Ç–ª—É—é' : '—Ç–µ–º–Ω—É—é'}`)
  }

  // –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
  const resetProgress = () => {
    localStorage.removeItem('solvedTaskIds')
    setSolvedTaskIds([])
    setProgress(0)
    console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.')
    loadRandomTask()
  }

  return (
    <main className={`flex min-h-screen flex-col items-center p-4 md:p-8 lg:p-12`}>
      <div className="fixed top-4 right-4 flex items-center gap-4">
        <button 
          onClick={toggleTheme} 
          className="p-2 rounded-full bg-gray-200 dark:bg-gray-700"
        >
          {isDarkMode ? '‚òÄÔ∏è' : 'üåô'}
        </button>
        <a 
          href="/Excel-Tasks.xlsx" 
          download 
          className="p-2 rounded-full bg-green-500 text-white hover:bg-green-600"
        >
          üìä
        </a>
      </div>

      <h1 className="text-2xl md:text-3xl font-bold mb-6 text-center">
        –¢—Ä–µ–Ω–∞–∂–µ—Ä –∑–∞–¥–∞—á –ï–ì–≠ –ø–æ Excel
      </h1>

      <div className="flex gap-4 mb-8">
        <Link 
          href="/ege" 
          className="px-4 py-2 bg-primary text-white rounded hover:bg-blue-700"
        >
          –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
        </Link>
      </div>

      <div className="w-full max-w-md mb-6">
        <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-4">
          <div 
            className="bg-primary h-4 rounded-full transition-all duration-500" 
            style={{ width: `${progress}%` }}
          ></div>
        </div>
        <p className="text-center mt-2">–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%</p>
      </div>

      {errorMessage && (
        <div className="w-full max-w-md mb-4 bg-red-100 dark:bg-red-900 border border-red-400 text-red-700 dark:text-red-200 px-4 py-3 rounded">
          <p>{errorMessage}</p>
          <button 
            className="text-sm underline mt-1" 
            onClick={() => setErrorMessage(null)}
          >
            –°–∫—Ä—ã—Ç—å
          </button>
        </div>
      )}

      {isLoading ? (
        <div className="w-full max-w-md bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6 text-center">
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...</p>
        </div>
      ) : currentTask ? (
        <div className="w-full max-w-md bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6">
          <p className="text-lg mb-4">{currentTask.text}</p>
          
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="answer" className="block mb-2">–í–∞—à –æ—Ç–≤–µ—Ç:</label>
              <input 
                id="answer"
                type="number" 
                value={userAnswer} 
                onChange={(e) => setUserAnswer(e.target.value)} 
                className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded" 
                required 
              />
            </div>
            
            {message && (
              <p className={message.includes('–ü—Ä–∞–≤–∏–ª—å–Ω–æ') ? 'text-green-500' : 'text-red-500'}>
                {message}
              </p>
            )}
            
            <div className="flex gap-2">
              <button 
                type="submit" 
                className="bg-primary hover:bg-blue-700 text-white py-2 px-4 rounded"
              >
                –û—Ç–≤–µ—Ç–∏—Ç—å
              </button>
              <button 
                type="button" 
                onClick={() => loadRandomTask()} 
                className="bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500 py-2 px-4 rounded"
              >
                –î—Ä—É–≥–∞—è –∑–∞–¥–∞—á–∞
              </button>
            </div>
          </form>
        </div>
      ) : (
        <div className="w-full max-w-md bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6 text-center">
          <h2 className="text-xl mb-4">üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ</h2>
          <p className="mb-4">–í—ã —Ä–µ—à–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏!</p>
          <button 
            onClick={resetProgress} 
            className="bg-primary hover:bg-blue-700 text-white py-2 px-4 rounded"
          >
            –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
          </button>
        </div>
      )}

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="mt-8 w-full max-w-md p-4 bg-gray-100 dark:bg-gray-900 rounded-lg text-xs">
        <p className="font-bold mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:</p>
        <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {tasks.length}</p>
        <p>–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: {solvedTaskIds.length}</p>
        <p>–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ ID: {currentTask?.id || '–Ω–µ—Ç'}</p>
        <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {tasks === FALLBACK_TASKS ? '–¥–∞' : '–Ω–µ—Ç'}</p>
      </div>
    </main>
  )
}
